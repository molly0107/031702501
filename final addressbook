#include "pch.h"
#include<Windows.h>
#include <iostream>
#include<cstdio>
#include<string>
#include<cctype>
#include<fstream>
#include<cstdlib>
using namespace std;

class Person {
public:
	string total;
	string name;
	string telnum;
	wstring province; //省
	wstring city; //市/直辖市
	wstring county; //区/县/县级市
	wstring street; //街道/镇/乡
	wstring detailaddr; //详细地址
	Person() {
		total = " "; name = " ";  telnum = " "; province = L""; city = L""; county = L""; street = L""; detailaddr = L"";
	};
};
Person addr[50];
//建立省、直辖市、自治区表
wstring direct_pro[4] = { L"北京",L"上海",L"天津",L"重庆" };
wstring autop[5] = { L"内蒙古",L"宁夏回族",L"西藏",L"广西壮族",L"新疆维吾尔" };
wstring provincebook[22] = { L"河北",L"山西",L"辽宁",L"吉林",L"江苏",L"浙江",L"安徽",L"福建",L"江西",L"山东",L"河南",L"湖北",L"湖南",L"广东",L"海南",L"四川",L"贵州",L"云南",L"陕西",L"甘肃",L"青海",L"台湾" };
//把string转换成wstring
wstring stringtowstring(string str)
{
	wstring result;
	//获取缓冲区大小，并申请空间，缓冲区大小按字符计算  
	int len = MultiByteToWideChar(CP_ACP, 0, str.c_str(), str.size(), NULL, 0);
	TCHAR* buffer = new TCHAR[len + 1];
	//多字节编码转换成宽字节编码  
	MultiByteToWideChar(CP_ACP, 0, str.c_str(), str.size(), buffer, len);
	buffer[len] = '\0';             //添加字符串结尾  
	//删除缓冲区并返回值  
	result.append(buffer);
	delete[] buffer;
	return result;
}
//把wstring转成string
string wstringtostring(wstring wstr)
{
	string result;
	//获取缓冲区大小，并申请空间，缓冲区大小事按字节计算的  
	int len = WideCharToMultiByte(CP_ACP, 0, wstr.c_str(), wstr.size(), NULL, 0, NULL, NULL);
	char* buffer = new char[len + 1];
	//宽字节编码转换成多字节编码  
	WideCharToMultiByte(CP_ACP, 0, wstr.c_str(), wstr.size(), buffer, len, NULL, NULL);
	buffer[len] = '\0';
	//删除缓冲区并返回值  
	result.append(buffer);
	delete[] buffer;
	return result;
}
//判断一级地址并且赋予person.province
int select_pro(string obj, int p) {
	wstring t = L"", obj_;
	obj_ = stringtowstring(obj);
	//判断直辖市
	t += obj_[0]; t += obj_[1];//取地址前两位
	for (int i = 0; i < 4; i++) {
		if (t == direct_pro[i]) {
			addr[p].province = t; addr[p].city = t; addr[p].city += L"市";
			if (obj_[2] == L'市') { return 3; }
			else return 2;
			break;
		}
	}
	//判断自治区
	wstring z; z += obj_[0]; z += obj_[1];
	if (z == autop[2]) { addr[p].province = L"西藏自治区"; return 5; }
	z += obj_[2];
	if (z == autop[0]) { addr[p].province = L"内蒙古自治区"; return 6; }
	z += obj_[3];
	if (z == autop[1]) { addr[p].province = L"宁夏回族自治区"; return 7; }
	else if (z == autop[3]) { addr[p].province = L"广西壮族自治区"; return 7; }
	z += obj_[4];
	if (z == autop[4]) { addr[p].province = L"新疆维吾尔自治区"; return 8; }
	//判断普通省份
	else {
		if (obj_[0] == L'黑') {
			if (obj_[3] != L'省') {
				addr[p].province = L"黑龙江省";
				return 3;
			}
			else { addr[p].province = L"黑龙江省"; return 4; }
		}//判断是否为黑龙江省
		else {
			for (int j = 0; j < 22; j++) {
				if (t == provincebook[j]) {
					t += L"省";
					if (obj_[2] == L'省') { addr[p].province = t; return 3; break; }
					else { addr[p].province = t; return 2; break; }
				}
			}
		}
	}
	return 0;
}
//判断二级地址并赋值给city
int select_city(wstring obj, int c) {
	wstring city_ = L"";
	//识别“市”关键字
	for (int i = 0; i < 5; i++) {
		city_ += obj[i];
		if (obj[i] == L'市') {
			addr[c].city = city_;
			return i + 1; break;
		}
	}
	return 0;
}
//判断三级地址并赋值给couty
int select_county(wstring obj, int c) {
	wstring county_ = L"";
	int len = obj.length();
	//识别“区”、“县”关键字
	for (int i = 0; i < len; i++) {
		county_ += obj[i];
		if (obj[i] == L'县' || obj[i] == L'区') {
			addr[c].county = county_;
			return i + 1; break;
		}
	}
	return 0;
}
//判断四级地址并赋值给street
int select_street(wstring obj, int c) {
	wstring street_ = L"";
	int len = obj.length();
	//识别“街道”、“镇”、“乡”关键字
	for (int i = 0; i < len; i++) {
		street_ += obj[i];
		if (obj[i] == L'镇' || obj[i] == L'乡' || obj[i] == L'道') {
			addr[c].street = street_;
			return i + 1; break;
		}
	}
	return 0;
}
int main()
{

	ifstream inFile;
	inFile.open("C:\\vs\\1.txt", ios::in); 
	if (!inFile) {
		cout << "error opening source file." << endl;
	}
	//else {cout << "success" << endl;}
	ofstream outFile("2.txt", ios::out);
	if (!outFile) {
		inFile.close();
		cout << "error opening destination file." << endl;
		return 0;
	}
	//else {cout << "open success" << endl;}
	string temp;
	int i = 0;
	while (getline(inFile, temp)) {
		addr[i].total = temp;
		i++;
	}
	string c, name_, telnum_;
	wstring c_;
	int j, l, k, x;
	for (j = 0; j < i; j++)
	{
		c = addr[j].total;
		l = c.find(",");
		name_ = c.substr(0, l);//提取名字
		c.erase(0, l + 1);//删除名字和逗号
		k = c.find_first_of("1");
		telnum_ = c.substr(k, 11);//提取号码
		c.erase(k, 11);//删除号码
		addr[j].telnum = telnum_;
		addr[j].name = name_;
		x = select_pro(c, j);
		c.erase(0, x + x);//删除省份
		wstring c_ = stringtowstring(c);
		x = select_city(c_, j);
		c_.erase(0, x);//删除市
		x = select_county(c_, j);
		c_.erase(0, x);//删除县、区
		x = select_street(c_, j);
		c_.erase(0, x);//删除街道、镇、乡
		addr[j].detailaddr = c_;
		wstring n = stringtowstring(addr[j].name), tel = stringtowstring(addr[j].telnum);
		string  s = wstringtostring(addr[j].province), ss = wstringtostring(addr[j].city), sss = wstringtostring(addr[j].county), ssss = wstringtostring(addr[j].street), sssss = wstringtostring(addr[j].detailaddr);
		wcout.imbue(std::locale("chs"));
		wcout<< L"{“姓名”:“" <<n<<  L"”，“手机”：“"<<tel<< L"”，“地址”：[“" << addr[j].province << L"”，“" << addr[j].city << L"”，“" << addr[j].county << L"”，“" << addr[j].street << L"”，“" << addr[j].detailaddr << L"”]}" << endl;
		outFile << "{“姓名”:“" << addr[j].name << "”，“手机”：“" << addr[j].telnum << "”，“地址”：[“" << s << "”，“" << ss << "”，“" << sss << "”，“" << ssss << "”，“" << sssss << "”]}" << endl;
	}
	inFile.close();
	outFile.close();
	return 0;
}
